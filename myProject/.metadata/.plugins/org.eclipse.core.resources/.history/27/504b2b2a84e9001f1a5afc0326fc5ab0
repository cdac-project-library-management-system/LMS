package com.lms.service.impl;

import com.lms.dto.PaginatedResponseDTO;
import com.lms.dto.request.ReviewRequestDTO;
import com.lms.dto.response.ReviewResponseDTO;
import com.lms.service.ReviewService;

@Service
@RequiredArgsConstructor
public class ReviewServiceImpl implements ReviewService {

    private final ReviewRepository reviewRepository;
    private final UserRepository userRepository;
    private final BookRepository bookRepository;
    private final ModelMapper modelMapper;

    @Override
    @Transactional
    public ReviewResponseDto createReview(ReviewRequestDto dto) {
        Review review = modelMapper.map(dto, Review.class);
        review.setUser(userRepository.findByIdAndStatusTrue(dto.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found")));
        review.setBook(bookRepository.findById(dto.getBookId())
                .orElseThrow(() -> new RuntimeException("Book not found")));
        review = reviewRepository.save(review);
        return modelMapper.map(review, ReviewResponseDto.class);
    }

    @Override
    @Transactional
    public ReviewResponseDto updateReview(Long reviewId, ReviewRequestDto dto) {
        Review review = reviewRepository.findById(reviewId)
                .orElseThrow(() -> new RuntimeException("Review not found"));
        if (dto.getRating() != null) review.setRating(dto.getRating());
        if (dto.getComment() != null) review.setComment(dto.getComment());
        if (dto.getReviewDate() != null) review.setReviewDate(dto.getReviewDate());
        review = reviewRepository.save(review);
        return modelMapper.map(review, ReviewResponseDto.class);
    }

    @Override
    public ReviewResponseDto getReviewById(Long reviewId) {
        Review review = reviewRepository.findById(reviewId)
                .orElseThrow(() -> new RuntimeException("Review not found"));
        return modelMapper.map(review, ReviewResponseDto.class);
    }

    @Override
    public PaginatedResponseDto<ReviewResponseDto> getReviewsByBook(Long bookId, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Review> pageResult = reviewRepository.findByBookId(bookId, pageable);
        List<ReviewResponseDto> dtos = pageResult.getContent()
                .stream()
                .map(review -> modelMapper.map(review, ReviewResponseDto.class))
                .collect(Collectors.toList());
        PaginatedResponseDto<ReviewResponseDto> response = new PaginatedResponseDto<>();
        response.setItems(dtos);
        response.setCurrentPage(pageResult.getNumber());
        response.setPageSize(pageResult.getSize());
        response.setTotalItems(pageResult.getTotalElements());
        response.setTotalPages(pageResult.getTotalPages());
        return response;
    }

    @Override
    public PaginatedResponseDto<ReviewResponseDto> getReviewsByUser(Long userId, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Review> pageResult = reviewRepository.findByUserId(userId, pageable);
        List<ReviewResponseDto> dtos = pageResult.getContent()
                .stream()
                .map(review -> modelMapper.map(review, ReviewResponseDto.class))
                .collect(Collectors.toList());
        PaginatedResponseDto<ReviewResponseDto> response = new PaginatedResponseDto<>();
        response.setItems(dtos);
        response.setCurrentPage(pageResult.getNumber());
        response.setPageSize(pageResult.getSize());
        response.setTotalItems(pageResult.getTotalElements());
        response.setTotalPages(pageResult.getTotalPages());
        return response;
    }
}
