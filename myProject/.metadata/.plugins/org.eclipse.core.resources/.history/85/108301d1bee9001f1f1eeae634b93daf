package com.lms.service.impl;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.lms.dto.PaginatedResponseDTO;
import com.lms.dto.request.FineRequestDTO;
import com.lms.dto.response.FineResponseDTO;
import com.lms.entities.Fine;
import com.lms.repository.BorrowRecordRepository;
import com.lms.repository.FineRepository;
import com.lms.service.FineService;

import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class FineServiceImpl implements FineService {

    private final FineRepository fineRepository;
    private final BorrowRecordRepository borrowRecordRepository;
    private final ModelMapper modelMapper;
    
    private static final BigDecimal PER_DAY_FINE = new BigDecimal("1.50");

    @Override
    public FineResponseDTO createFine(FineRequestDTO dto) {
        Fine fine = modelMapper.map(dto, Fine.class);
        fine.setBorrowRecord(borrowRecordRepository.findById(dto.getBorrowRecordId())
                .orElseThrow(() -> new RuntimeException("Borrow record not found")));
        fine = fineRepository.save(fine);
        return modelMapper.map(fine, FineResponseDTO.class);
    }

    @Override
    public FineResponseDTO updateFine(Long fineId, FineRequestDTO dto) {
        Fine fine = fineRepository.findById(fineId)
                .orElseThrow(() -> new RuntimeException("Fine not found"));
        fine.setDaysOverdue(dto.getDaysOverdue());
        fine.setFineAmount(dto.getFineAmount());
        fine.setStatus(dto.getStatus());
        fine = fineRepository.save(fine);
        return modelMapper.map(fine, FineResponseDTO.class);
    }

    @Override
    public FineResponseDTO getFineById(Long fineId) {
        Fine fine = fineRepository.findById(fineId)
                .orElseThrow(() -> new RuntimeException("Fine not found"));
        return modelMapper.map(fine, FineResponseDTO.class);
    }

    @Override
    public FineResponseDTO getFineByBorrowRecord(Long borrowRecordId) {
        Fine fine = fineRepository.findByBorrowRecordId(borrowRecordId)
                .orElseThrow(() -> new RuntimeException("Fine not found for this borrow record"));
        return modelMapper.map(fine, FineResponseDTO.class);
    }

    @Override
    public PaginatedResponseDTO<FineResponseDTO> getAllFines(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Fine> pageResult = fineRepository.findAll(pageable);
        List<FineResponseDTO> dtos = pageResult.getContent()
                .stream()
                .map(fine -> modelMapper.map(fine, FineResponseDTO.class))
                .collect(Collectors.toList());
        PaginatedResponseDTO<FineResponseDTO> response = new PaginatedResponseDTO<>();
        response.setItems(dtos);
        response.setCurrentPage(pageResult.getNumber());
        response.setPageSize(pageResult.getSize());
        response.setTotalItems(pageResult.getTotalElements());
        response.setTotalPages(pageResult.getTotalPages());
        return response;
    }
    
}
