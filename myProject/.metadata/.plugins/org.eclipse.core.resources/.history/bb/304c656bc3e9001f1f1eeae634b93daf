package com.lms.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lms.dto.request.BookRequestDTO;
import com.lms.dto.response.BookResponseDTO;
import com.lms.service.BookService;

import io.swagger.v3.oas.annotations.parameters.RequestBody;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/books")
@RequiredArgsConstructor
public class BookController {

    private final BookService bookService;
    
    // Create a new book
    @PostMapping
    public ResponseEntity<BookResponseDTO> createBook(@RequestBody BookRequestDTO bookRequestDto) {
        BookResponseDTO response = bookService.createBook(bookRequestDto);
        return ResponseEntity.ok(response);
    }
    
    // Update an existing book
    @PutMapping("/{bookId}")
    public ResponseEntity<BookResponseDTO> updateBook(@PathVariableLong bookId,
                                                      @RequestBody BookRequestDto bookRequestDto) {
        BookResponseDto response = bookService.updateBook(bookId, bookRequestDto);
        return ResponseEntity.ok(response);
    }
    
    // Get a book by ID
    @GetMapping("/{bookId}")
    public ResponseEntity<BookResponseDto> getBookById(@PathVariable Long bookId) {
        BookResponseDto response = bookService.getBookById(bookId);
        return ResponseEntity.ok(response);
    }
    
    // Get paginated list of books
    @GetMapping
    public ResponseEntity<PaginatedResponseDTO<BookResponseDto>> getAllBooks(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        PaginatedResponseDTO<BookResponseDto> response = bookService.getAllBooks(page, size);
        return ResponseEntity.ok(response);
    }
    
    // Delete a book (permanent deletion in this example)
    @DeleteMapping("/{bookId}")
    public ResponseEntity<Void> deleteBook(@PathVariable Long bookId) {
        bookService.deleteBook(bookId);
        return ResponseEntity.noContent().build();
    }
}
